pipeline{

    environment{
                    VERSION = "${env.BUILD_ID}"
                }


    agent{

        docker{
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
             }
    }

    stages{

             stage('Build and Test') {

                steps {

                     sh 'ls -ltr'
                     // build the project and create a JAR file
                    sh  'mvn clean package'
                 }
            }
            stage('sonar quality status'){

              environment {
        
                SONAR_URL = "http://54.88.152.38:9000"

                    }
            
                 steps{

                     withCredentials([string(credentialsId: 'sonar-token', variable: 'sonar_token')]) {

                      sh 'mvn sonar:sonar -Dsonar.login=$sonar_token -Dsonar.host.url=${SONAR_URL}'
        
                         }
  
                    }
            }
            // pushing image to nexus repo

            stage('docker build and push to nexus repo'){

                
                steps{

                    script{

                        withCredentials([string(credentialsId: 'nexus_passwd', variable: 'nexus_creds')]) {
    
                          sh '''
                              docker build -t 52.87.240.67:8083/spring-app:${VERSION} .
                              docker login -u admin -p $nexus_creds 52.87.240.67:8083
                              docker push 52.87.240.67:8083/spring-app:${VERSION}
                              docker rmi 52.87.240.67:8083/spring-app:${VERSION}


                            '''

                        }

                    }
                }
            }

             stage('Identifying misconfigs using datree in helm charts'){

                steps{

                    script{

                        dir('kubernetes/myapp'){
                      
                         sh  'helm datree test .'

                        }
                    }
                }
             }

        }

        post {

		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "vinod5734@gmail.com";  
		}
	}

    }
