pipeline{

    environment{
                    VERSION = "${env.BUILD_ID}"
                }


    agent{

        docker{
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
             }
    }

    stages{

             stage('Build and Test') {

                steps {

                     sh 'ls -ltr'
                     // build the project and create a JAR file
                    sh  'mvn clean package'
                 }
            }
            stage('sonar quality status'){

              environment {
        
                SONAR_URL = "http://54.167.98.125:9000"

                    }
            
                 steps{

                     withCredentials([string(credentialsId: 'sonar-token', variable: 'sonar_token')]) {

                      sh 'mvn sonar:sonar -Dsonar.login=$sonar_token -Dsonar.host.url=${SONAR_URL}'
        
                         }
  
                    }
            }
            // pushing image to nexus repo

            stage('docker build and push to nexus repo'){

                
                steps{

                    script{

                        withCredentials([string(credentialsId: 'nexus_passwd', variable: 'nexus_creds')]) {
    
                          sh '''
                              docker build -t 3.87.5.239:8083/spring-app:${VERSION} .
                              docker login -u admin -p $nexus_creds 3.87.5.239:8083
                              docker push 3.87.5.239:8083/spring-app:${VERSION}
                              docker rmi 3.87.5.239:8083/spring-app:${VERSION}


                            '''

                        }

                    }
                }
            }


        stage('installation of helm') {
            
    steps{
        sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3'
        sh 'chmod 700 get_helm.sh'
        sh './get_helm.sh'
        sh 'which helm'
        sh 'helm version'
        sh 'helm plugin install https://github.com/datreeio/helm-datree' 
       sh   'helm plugin list'
       sh    'echo $HELM_HOME'
      


       

    }

}

 stage('indentifying misconfigs using datree in helm charts'){

     environment {

              PATH = "/usr/local/bin/datree"

                }

            steps{
                script{

                    dir('kubernetes/') {
            

                    
                     sh 'helm datree test myapp .'   
                    }
                }
            }
        }



 stage(' pushing helm charts to nexus repo'){

          environment {

              PATH = "/usr/bin/local/helm"

                }

            steps{

                script{

                    withCredentials([string(credentialsId: 'nexus_passwd', variable: 'nexus_creds')]){

                        dir('kubernetes/'){
                            
                            sh '''
                                
                                 helmversion=$( helm show chart myapp | grep version | cut -d: -f 2 | tr -d ' ')
                                 tar -czvf  myapp-${helmversion}.tgz myapp/
                                 curl -u admin:$nexus_creds http://3.87.5.239:8081/repository/helm-hosted/ --upload-file myapp-${helmversion}.tgz -v
                            '''
                        }
                    }

                }
            }
           }
           
        }

        post {

		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "vinod5734@gmail.com";  
		}
	}

    }
